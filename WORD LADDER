class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
      //converting wordList top a set
      unordered_set<string> wordSet(wordList.begin(), wordList.end()) ;
      //last word not present in set 
      if(!wordSet.count(endWord))
      return 0;
      int steps=0;
      queue<string> q;
      q.push(beginWord);
      while(!q.empty())
      {
        ++steps;
        for(int sz=q.size();sz>0;sz--)
        {
            string word=q.front();
            q.pop();
            for(int i=0;i<word.length();i++)
            {
                const char cache=word[i];
                for(char c='a';c<='z';c++)
                {
                    word[i]=c;
                    if(word==endWord)
                    return steps+1;
                    if(wordSet.count(word)){
                        q.push(word);
                        wordSet.erase(word);
                    }
                }
                word[i]=cache;
            }
        }
      }
      return 0;
    }
};
