#include <queue>

bool isCycle(int vertex, vector<vector<int>>& graph, vector<bool>& visited,vector<int>& parent)
{
  visited[vertex]=true;
  queue<int> q;
  q.push(vertex);
  while(q.size()!=0)
  {
      int remVertex=q.front();
      q.pop();
      //no pushing rn
      for(int it: graph[remVertex])
      {if(visited[it]==false)
       {
           visited[it]=true;
           q.push(it);
           parent[it]=remVertex;
        } else if (visited[it] == true && parent[remVertex] != it) {
           return true;
        }
      }
  }
  return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    vector<vector<int>> graph(n+1,vector<int>());
    for(int i=0;i<m;i++)
    {
        graph[edges[i][1]].push_back(edges[i][0]);
        graph[edges[i][0]].push_back(edges[i][1]);
    }
    vector<bool> visited(n+1,false);
    vector<int> parent(n+1,-1);

    for(int i=0;i<n;i++)
    {
        if(visited[i]==false)
        {
            if(isCycle(i,graph,visited,parent)==true)
            {
                return "Yes";
            }
        }
    }
    return "No";
}
